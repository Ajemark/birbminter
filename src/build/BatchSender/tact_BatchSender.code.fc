#pragma version =0.4.4;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "tact_BatchSender.headers.fc";
#include "tact_BatchSender.stdlib.fc";
#include "tact_BatchSender.constants.fc";
#include "tact_BatchSender.storage.fc";

;;
;; Contract BatchSender functions
;;

(slice) $BatchSender$_contract_init() impure inline_ref {
    var (($self'deployer)) = (null());
    $self'deployer = __tact_context_get_sender();
    return ($self'deployer);
}

((slice), ()) $BatchSender$_fun_sendBatch((slice) $self, (cell, cell, cell, int) $data) impure inline_ref {
    var (($self'deployer)) = $self;
    var (($data'address, $data'amount, $data'comment, $data'length)) = $data;
    int $i = $data'length;
    while (($i > 0)) {
        __tact_debug_str(__gen_slice_string_1f952c0a3d2dff574cf6695723f51217ae488b1d24f45a0b9de480350c658647(), "[DEBUG] File contracts\batch_sender.tact:39:13");
        slice $to = __tact_not_null(__tact_dict_get_int_slice($data'address, 257, $i));
        int $amount = __tact_not_null(__tact_dict_get_int_int($data'amount, 257, $i, 257));
        cell $comment = __tact_not_null(__tact_dict_get_int_cell($data'comment, 257, $i));
        __tact_debug_str(__tact_int_to_string($amount), "[DEBUG] File contracts\batch_sender.tact:44:13");
        __tact_debug_str(__tact_int_to_string($i), "[DEBUG] File contracts\batch_sender.tact:45:13");
        __tact_debug_str(__tact_int_to_string($data'length), "[DEBUG] File contracts\batch_sender.tact:46:13");
        $global_send($SendParameters$_constructor_to_value_mode_bounce_body($to, $amount, 2, true, $comment));
        $i = $i - 1;
    }
    return (($self'deployer), ());
}

((slice), int) $BatchSender$_fun_balance((slice) $self) impure inline_ref {
    var (($self'deployer)) = $self;
    return (($self'deployer), __tact_my_balance());
}

;;
;; Receivers of a Contract BatchSender
;;

(((slice)), ()) $BatchSender$_internal_binary_Data((slice) $self, (cell, cell, cell, int) $msg) impure inline {
    var ($self'deployer) = $self;
    var ($msg'address, $msg'amount, $msg'comment, $msg'length) = $msg;
    ($self'deployer)~$BatchSender$_fun_sendBatch($Data$_tensor_cast(($msg'address, $msg'amount, $msg'comment, $msg'length)));
    return (($self'deployer), ());
}

(((slice)), ()) %$BatchSender$_internal_empty((slice) $self) impure inline {
    var ($self'deployer) = $self;
    __tact_debug_str(__gen_slice_string_22a6a2a99263a76cf7ab87fc0ed5e0f266dd926fac11446b1c38bc84fff439ad(), "[DEBUG] File contracts\batch_sender.tact:32:9");
    return (($self'deployer), ());
}

((slice), ()) $BatchSender$_internal_text_beb2935a82089b154d32f99c4377aa960aa115366cc2c602755e36b97f505cec((slice) $self) impure inline {
    var ($self'deployer) = $self;
    throw_unless(15509, ( __tact_slice_eq_bits($self'deployer, __tact_context_get_sender()) ));
    $global_send($SendParameters$_constructor_to_bounce_value_mode(__tact_context_get_sender(), true, ((__tact_my_balance() - $Context$_get_value(__tact_context_get())) - 10000000), (64 + 2)));
    return (($self'deployer), ());
}

(((slice)), ()) $BatchSender$_internal_binary_Deploy((slice) $self, (int) $deploy) impure inline {
    var ($self'deployer) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'deployer)~$BatchSender$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'deployer), ());
}

;;
;; Get methods of a Contract BatchSender
;;

_ %balance() method_id(104128) {
    var self = $BatchSender$_contract_load();
    var res = self~$BatchSender$_fun_balance();
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.debug.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmP88xPeioW9hh8uN54bsVLSQ5Ssc45XfuyTtFR6YmkHW9";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract BatchSender
;;

((slice), int) $BatchSender$_contract_router_internal((slice) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive Data message
    if (op == 4188364806) {
        var msg = in_msg~$Data$_load();
        self~$BatchSender$_internal_binary_Data(msg);
        return (self, true);
    }
    
    ;; Receive empty message
    if ((op == 0) & (slice_bits(in_msg) <= 32)) {
        self~%$BatchSender$_internal_empty();
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$BatchSender$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    ;; Text Receivers
    if (op == 0) {
        var text_op = slice_hash(in_msg);
        
        ;; Receive "withdraw safe" message
        if (text_op == 0xbeb2935a82089b154d32f99c4377aa960aa115366cc2c602755e36b97f505cec) {
            self~$BatchSender$_internal_text_beb2935a82089b154d32f99c4377aa960aa115366cc2c602755e36b97f505cec();
            return (self, true);
        }
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $BatchSender$_contract_load();
    
    ;; Handle operation
    int handled = self~$BatchSender$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $BatchSender$_contract_store(self);
}
